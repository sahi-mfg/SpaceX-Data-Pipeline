"""
This type stub file was generated by pyright.
"""

LOGGER = ...
class Message:
    '''Base class for messages.'''
    def asdict(self):
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __repr__(self):
        ...
    
    def __str__(self) -> str:
        ...
    


class RecordMessage(Message):
    '''RECORD message.

    The RECORD message has these fields:

      * stream (string) - The name of the stream the record belongs to.
      * record (dict) - The raw data for the record
      * version (optional, int) - For versioned streams, the version
        number. Note that this feature is experimental and most Taps and
        Targets should not need to use versioned streams.

    msg = singer.RecordMessage(
        stream='users',
        record={'id': 1, 'name': 'Mary'})

    '''
    def __init__(self, stream, record, version=..., time_extracted=...) -> None:
        ...
    
    def asdict(self): # -> dict[str, Any]:
        ...
    
    def __str__(self) -> str:
        ...
    


class SchemaMessage(Message):
    '''SCHEMA message.

    The SCHEMA message has these fields:

      * stream (string) - The name of the stream this schema describes.
      * schema (dict) - The JSON schema.
      * key_properties (list of strings) - List of primary key properties.

    msg = singer.SchemaMessage(
        stream='users',
        schema={'type': 'object',
                'properties': {
                    'id': {'type': 'integer'},
                    'name': {'type': 'string'}
                }
               },
        key_properties=['id'])

    '''
    def __init__(self, stream, schema, key_properties, bookmark_properties=...) -> None:
        ...
    
    def asdict(self): # -> dict[str, Any]:
        ...
    


class StateMessage(Message):
    '''STATE message.

    The STATE message has one field:

      * value (dict) - The value of the state.

    msg = singer.StateMessage(
        value={'users': '2017-06-19T00:00:00'})

    '''
    def __init__(self, value) -> None:
        ...
    
    def asdict(self): # -> dict[str, Any]:
        ...
    


class ActivateVersionMessage(Message):
    '''ACTIVATE_VERSION message (EXPERIMENTAL).

    The ACTIVATE_VERSION messages has these fields:

      * stream - The name of the stream.
      * version - The version number to activate.

    This is a signal to the Target that it should delete all previously
    seen data and replace it with all the RECORDs it has seen where the
    record's version matches this version number.

    Note that this feature is experimental. Most Taps and Targets should
    not need to use the "version" field of "RECORD" messages or the
    "ACTIVATE_VERSION" message at all.

    msg = singer.ActivateVersionMessage(
        stream='users',
        version=2)

    '''
    def __init__(self, stream, version) -> None:
        ...
    
    def asdict(self): # -> dict[str, Any]:
        ...
    


def parse_message(msg): # -> RecordMessage | SchemaMessage | StateMessage | ActivateVersionMessage | None:
    """Parse a message string into a Message object."""
    ...

def format_message(message, ensure_ascii=...): # -> str:
    ...

def write_message(message, ensure_ascii=...): # -> None:
    ...

def write_record(stream_name, record, stream_alias=..., time_extracted=...): # -> None:
    """Write a single record for the given stream.

    write_record("users", {"id": 2, "email": "mike@stitchdata.com"})
    """
    ...

def write_records(stream_name, records): # -> None:
    """Write a list of records for the given stream.

    chris = {"id": 1, "email": "chris@stitchdata.com"}
    mike = {"id": 2, "email": "mike@stitchdata.com"}
    write_records("users", [chris, mike])
    """
    ...

def write_schema(stream_name, schema, key_properties, bookmark_properties=..., stream_alias=...): # -> None:
    """Write a schema message.

    stream = 'test'
    schema = {'properties': {'id': {'type': 'integer'}, 'email': {'type': 'string'}}}  # nopep8
    key_properties = ['id']
    write_schema(stream, schema, key_properties)
    """
    ...

def write_state(value): # -> None:
    """Write a state message.

    write_state({'last_updated_at': '2017-02-14T09:21:00'})
    """
    ...

def write_version(stream_name, version): # -> None:
    """Write an activate version message.

    stream = 'test'
    version = int(time.time())
    write_version(stream, version)
    """
    ...

