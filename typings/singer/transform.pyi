"""
This type stub file was generated by pyright.
"""

LOGGER = ...
NO_INTEGER_DATETIME_PARSING = ...
UNIX_SECONDS_INTEGER_DATETIME_PARSING = ...
UNIX_MILLISECONDS_INTEGER_DATETIME_PARSING = ...
VALID_DATETIME_FORMATS = ...
def string_to_datetime(value): # -> str | None:
    ...

def unix_milliseconds_to_datetime(value): # -> str:
    ...

def unix_seconds_to_datetime(value): # -> str:
    ...

def breadcrumb_path(breadcrumb): # -> str:
    """
    Transform breadcrumb into familiar object dot-notation
    """
    ...

class SchemaMismatch(Exception):
    def __init__(self, errors) -> None:
        ...
    


class SchemaKey:
    ref = ...
    items = ...
    properties = ...
    pattern_properties = ...
    any_of = ...


class Error:
    def __init__(self, path, data, schema=..., logging_level=...) -> None:
        ...
    
    def tostr(self): # -> str:
        ...
    


class Transformer:
    def __init__(self, integer_datetime_fmt=..., pre_hook=...) -> None:
        ...
    
    def log_warning(self): # -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, *args): # -> None:
        ...
    
    def filter_data_by_metadata(self, data, metadata, parent=...): # -> list[Any] | dict[Any, Any]:
        ...
    
    def transform(self, data, schema, metadata=...): # -> None:
        ...
    
    def transform_recur(self, data, schema, path): # -> tuple[Any, Any] | tuple[Literal[False], None] | tuple[Literal[True], Any]:
        ...
    


def transform(data, schema, integer_datetime_fmt=..., pre_hook=..., metadata=...): # -> None:
    """
    Applies schema (and integer_datetime_fmt, if supplied) to data, transforming
    each field in data to the type specified in schema. If no type matches a
    data field, this throws an Exception.

    This applies types in order with the exception of 'null', which is always
    applied last.

    The valid types are: integer, number, boolean, array, object, null, string,
    and string with date-time format.

    If an integer_datetime_fmt is supplied, integer values in fields with date-
    time formats are appropriately parsed as unix seconds or unix milliseconds.

    The pre_hook should be a callable that takes data, type, and schema and
    returns the transformed data to be fed into the _transform function.
    """
    ...

def resolve_schema_references(schema, refs=...):
    '''Resolves and replaces json-schema $refs with the appropriate dict.

    Recursively walks the given schema dict, converting every instance
    of $ref in a 'properties' structure with a resolved dict.

    This modifies the input schema and also returns it.

    Arguments:
        schema:
            the schema dict
        refs:
            a dict of <string, dict> which forms a store of referenced schemata

    Returns:
        schema
    '''
    ...

